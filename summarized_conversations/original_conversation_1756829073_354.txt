{'role': 'assistant', 'content': 'Now, let\'s create a simple installation and setup guide for developers who want to work on this project:\n\n<function_calls>\n<create-file file_path="eternis33_prototype/docs/developer_guide.md">\n# Eternis-33: Prototype Shard - Developer Guide\n\nThis guide provides instructions for setting up and developing the Eternis-33: Prototype Shard AR game.\n\n## Development Environment Setup\n\n### Prerequisites\n\n- [Godot 4.x](https://godotengine.org/download) - Game engine\n- [Android Studio](https://developer.android.com/studio) (for Android builds)\n- [Xcode](https://developer.apple.com/xcode/) (for iOS builds)\n- [Node.js](https://nodejs.org/) (for backend server)\n- [Git](https://git-scm.com/) - Version control\n\n### AR Development Requirements\n\n- Android: ARCore supported device\n- iOS: ARKit supported device (iPhone 6S or newer)\n\n### API Keys\n\nYou\'ll need to obtain the following API keys:\n- Mapbox API key for map integration\n- (Optional) Firebase or alternative backend service\n\n## Project Setup\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/yourusername/eternis33-prototype.git\ncd eternis33-prototype\n```\n\n### 2. Godot Project Setup\n\n1. Open Godot 4.x\n2. Click "Import" and navigate to the cloned repository\n3. Select the `project.godot` file\n4. Click "Import & Edit"\n\n### 3. Backend Server Setup\n\n```bash\ncd src/server\nnpm install\nnpm run dev  # Starts the server in development mode\n```\n\nThe server will run on port 8080 by default.\n\n### 4. Configure API Keys\n\n1. Create a file named `api_keys.gd` in the `src` directory\n2. Add your API keys:\n\n```gdscript\n# api_keys.gd\nclass_name ApiKeys\n\nconst MAPBOX_API_KEY = "your_mapbox_api_key_here"\nconst SERVER_URL = "ws://localhost:8080"  # For local development\n```\n\n**Note:** Make sure to add `api_keys.gd` to your `.gitignore` file to avoid committing sensitive information.\n\n## Project Structure\n\n### Key Directories\n\n- `src/` - Main game scripts\n- `assets/` - Game assets (models, textures, sounds, UI)\n- `docs/` - Documentation\n- `src/server/` - Backend server code\n\n### Key Files\n\n- `src/Main.gd` - Entry point for the game\n- `src/GameController.gd` - Main game controller\n- `src/ARController.gd` - AR functionality\n- `src/LocationManager.gd` - GPS and location handling\n- `src/Prism.gd` - Prism object behavior\n- `src/InventoryManager.gd` - Player inventory system\n- `src/NetworkManager.gd` - Multiplayer functionality\n- `src/UI.gd` - User interface controller\n\n## Development Workflow\n\n### AR Development\n\n1. **Testing AR Features:**\n   - Use Godot\'s AR simulation when possible\n   - For real device testing, build to device frequently\n\n2. **AR Best Practices:**\n   - Test in various lighting conditions\n   - Ensure plane detection is robust\n   - Optimize 3D models for mobile performance\n\n### Location-Based Features\n\n1. **Testing Location Features:**\n   - Use location simulation in development\n   - Test with small GPS movements\n   - Verify Prism anchoring accuracy\n\n2. **Location Best Practices:**\n   - Handle location permission requests gracefully\n   - Implement location error handling\n   - Consider battery usage optimization\n\n### Multiplayer Testing\n\n1. **Local Testing:**\n   - Run the local server (`npm run dev`)\n   - Connect multiple devices to test synchronization\n\n2. **Deployment Testing:**\n   - Deploy server to a hosting service\n   - Update `SERVER_URL` in `api_keys.gd`\n   - Test with geographically distributed users\n\n## Building and Deployment\n\n### Android Build\n\n1. Configure Android export settings in Godot\n2. Set up keystore for signing\n3. Export the project as an APK or AAB\n\n```bash\n# Command line build (optional)\ngodot --export "Android" /path/to/output.apk\n```\n\n### iOS Build\n\n1. Configure iOS export settings in Godot\n2. Set up Apple Developer account and certificates\n3. Export the project for Xcode\n4. Build and sign in Xcode\n\n### Server Deployment\n\n1. Choose a hosting provider (Heroku, DigitalOcean, etc.)\n2. Deploy the Node.js server:\n\n```bash\n# Example for Heroku\nheroku create eternis33-server\ngit subtree push --prefix src/server heroku main\n```\n\n## Performance Optimization\n\n### Mobile Optimization\n\n- Keep polygon count low for 3D models\n- Use efficient shaders\n- Implement level-of-detail (LOD) for distant objects\n- Optimize texture sizes\n\n### AR Optimization\n\n- Limit the number of AR objects in view\n- Use occlusion when available\n- Implement proper cleanup of AR anchors\n\n### Battery Considerations\n\n- Reduce GPS polling frequency when possible\n- Implement battery-saving mode\n- Allow background/foreground state handling\n\n## Troubleshooting\n\n### Common AR Issues\n\n- **Plane Detection Problems:**\n  - Ensure adequate lighting\n  - Check for reflective or uniform surfaces\n  - Verify ARCore/ARKit support on device\n\n- **Tracking Loss:**\n  - Implement graceful recovery\n  - Save anchor positions to restore objects\n\n### Location Issues\n\n- **GPS Inaccuracy:**\n  - Implement accuracy threshold filtering\n  - Consider using additional sensors for positioning\n  - Add visual feedback about GPS accuracy\n\n### Networking Issues\n\n- **Connection Problems:**\n  - Implement reconnection logic\n  - Cache data locally when offline\n  - Sync when connection is restored\n\n## Contributing\n\n1. Create a feature branch: `git checkout -b feature/new-feature`\n2. Make your changes\n3. Test thoroughly\n4. Submit a pull request\n\n## Resources\n\n- [Godot AR Documentation](https://docs.godotengine.org/en/stable/tutorials/vr/index.html)\n- [ARCore Documentation](https://developers.google.com/ar)\n- [ARKit Documentation](https://developer.apple.com/augmented-reality/)\n- [Mapbox Documentation](https://docs.mapbox.com/)\n</create-file>\n</function_calls>', 'tool_calls': None}